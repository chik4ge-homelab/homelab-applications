apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: alloy
  namespace: argocd
spec:
  project: default
  sources:
    - repoURL: https://grafana.github.io/helm-charts
      chart: alloy
      targetRevision: 1.1.1
      helm:
        parameters:
          - name: alloy.clustering.enabled
            value: "true"
          - name: alloy.configMap.content
            value: |
              discovery.kubernetes "pods" {
                role = "pod"
              }

              discovery.kubernetes "services" {
                role = "service"
              }

              discovery.kubernetes "nodes" {
                role = "node"
              }

              discovery.kubernetes "endpoints" {
                role = "endpoints"
              }

              discovery.relabel "pods" {
                targets = discovery.kubernetes.pods.targets

                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
                  separator = ";"
                  regex = "true"
                  action = "keep"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
                  separator = ";"
                  regex = "(.+)"
                  target_label = "__metrics_path__"
                  replacement = "$$1"
                  action = "replace"
                }

                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
                  separator = ";"
                  regex = `([^:]+)(?::\\d+)?;(\\d+)`
                  target_label = "__address__"
                  replacement = "$$1:$$2"
                  action = "replace"
                }

                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  action = "replace"
                  target_label = "pod"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "job"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  action = "replace"
                  target_label = "app"
                }
              }

              discovery.relabel "services" {
                targets = discovery.kubernetes.services.targets

                rule {
                  source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scrape"]
                  separator = ";"
                  regex = "true"
                  action = "keep"
                }

                rule {
                  source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_path"]
                  separator = ";"
                  regex = "(.+)"
                  target_label = "__metrics_path__"
                  replacement = "$$1"
                  action = "replace"
                }

                rule {
                  source_labels = ["__address__", "__meta_kubernetes_service_annotation_prometheus_io_port"]
                  separator = ";"
                  regex = `([^:]+)(?::\\d+)?;(\\d+)`
                  target_label = "__address__"
                  replacement = "$$1:$$2"
                  action = "replace"
                }

                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }

                rule {
                  source_labels = ["__meta_kubernetes_service_name"]
                  action = "replace"
                  target_label = "service"
                }
              }

              mimir.rules.kubernetes "default" {
                address = "http://mimir-nginx.mimir.svc.cluster.local"
              }

              prometheus.scrape "pods" {
                targets = discovery.relabel.pods.output
                forward_to = [prometheus.remote_write.default.receiver]
              }

              prometheus.scrape "services" {
                targets = discovery.relabel.services.output
                forward_to = [prometheus.remote_write.default.receiver]
              }

              prometheus.scrape "nodes" {
                targets = discovery.kubernetes.nodes.targets
                scheme     = "https"
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                tls_config {
                  insecure_skip_verify = true
                }
                forward_to = [prometheus.remote_write.default.receiver]
                job_name = "node-exporter"
              }

              prometheus.operator.servicemonitors "servicemonitors" {
                forward_to = [prometheus.remote_write.default.receiver]
              }

              discovery.relabel "kube_apiserver" {
                targets = discovery.kubernetes.endpoints.targets

                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  regex = "default"
                  action = "keep"
                }

                rule {
                  source_labels = ["__meta_kubernetes_service_name"]
                  regex = "kubernetes"
                  action = "keep"
                }

                rule {
                  source_labels = ["__meta_kubernetes_endpoint_port_name"]
                  regex = "https"
                  action = "keep"
                }

                rule {
                  replacement   = "kube-apiserver"
                  target_label  = "job"
                }
              }

              prometheus.scrape "kube_apiserver" {
                targets = discovery.relabel.kube_apiserver.output
                scheme = "https"
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                tls_config {
                  insecure_skip_verify = true
                }
                forward_to = [prometheus.remote_write.default.receiver]
              }

              discovery.relabel "kube_scheduler" {
                targets = discovery.kubernetes.pods.targets

                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  regex = "kube-system"
                  action = "keep"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_label_component"]
                  regex = "kube-scheduler"
                  action = "keep"
                }

                rule {
                  source_labels = ["__address__"]
                  replacement = "$1:10259"
                  target_label = "__address__"
                }

                rule {
                  replacement   = "kube-scheduler"
                  target_label  = "job"
                }
              }

              prometheus.scrape "kube_scheduler" {
                targets = discovery.relabel.kube_scheduler.output
                scheme     = "https"
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                tls_config {
                  insecure_skip_verify = true
                }
                forward_to = [prometheus.remote_write.default.receiver]
              }

              discovery.relabel "cadvisor" {
                targets = discovery.kubernetes.nodes.targets

                rule {
                  replacement   = "/metrics/cadvisor"
                  target_label  = "__metrics_path__"
                }

                rule {
                  replacement   = "cadvisor"
                  target_label  = "job"
                }
              }

              prometheus.scrape "cadvisor" {
                targets = discovery.relabel.cadvisor.output
                scheme = "https"
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                tls_config {
                  insecure_skip_verify = true
                }
                forward_to = [prometheus.remote_write.default.receiver]
              }

              discovery.relabel "kubelet" {
                targets = discovery.kubernetes.nodes.targets

                rule {
                  replacement   = "/metrics"
                  target_label  = "__metrics_path__"
                }

                rule {
                  replacement   = "kubelet"
                  target_label  = "job"
                }
              }

              prometheus.scrape "kubelet" {
                targets = discovery.relabel.kubelet.output
                scheme = "https"
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                tls_config {
                  insecure_skip_verify = true
                }
                forward_to = [prometheus.remote_write.default.receiver]
              }

              prometheus.remote_write "default" {
                endpoint {
                  url = "http://mimir-nginx.mimir.svc.cluster.local/api/v1/push"
                }
              }

              loki.source.kubernetes "pods" {
                targets = discovery.kubernetes.pods.targets
                forward_to = [loki.write.default.receiver]
              }

              loki.write "default" {
                endpoint {
                  url = "http://loki.loki.svc.cluster.local:3100/loki/api/v1/push"
                }
              }
    - repoURL: https://prometheus-community.github.io/helm-charts
      chart: prometheus-operator-crds
      targetRevision: 21.0.0
    - repoURL: https://github.com/chik4ge-homelab/homelab-applications
      targetRevision: main
      path: apps/monitoring/alloy/rules
  destination:
    server: {{ .Values.spec.destination.server }}
    namespace: alloy
  syncPolicy:
    automated:
      prune: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
