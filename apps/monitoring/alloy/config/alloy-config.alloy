discovery.kubernetes "pods" {
  role = "pod"
}

discovery.kubernetes "services" {
  role = "service"
}

discovery.kubernetes "nodes" {
  role = "node"
}

discovery.kubernetes "endpoints" {
  role = "endpoints"
}

discovery.relabel "pods" {
  targets = discovery.kubernetes.pods.targets

  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
    separator = ";"
    regex = "true"
    action = "keep"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
    separator = ";"
    regex = "(.+)"
    target_label = "__metrics_path__"
    replacement = "$1"
    action = "replace"
  }

  rule {
    source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
    separator = ";"
    regex = `([^:]+)(?:\d+)?;(\d+)`
    target_label = "__address__"
    replacement = "$1:$2"
    action = "replace"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }
}

discovery.relabel "services" {
  targets = discovery.kubernetes.services.targets

  rule {
    source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scrape"]
    separator = ";"
    regex = "true"
    action = "keep"
  }

  rule {
    source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_path"]
    separator = ";"
    regex = "(.+)"
    target_label = "__metrics_path__"
    replacement = "$1"
    action = "replace"
  }

  rule {
    source_labels = ["__address__", "__meta_kubernetes_service_annotation_prometheus_io_port"]
    separator = ";"
    regex = `([^:]+)(?:\d+)?;(\d+)`
    target_label = "__address__"
    replacement = "$1:$2"
    action = "replace"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_service_name"]
    action = "replace"
    target_label = "service"
  }
}

discovery.relabel "proxmox_hosts" {
  targets = [
    {"__address__" = "192.168.0.150:9100"},
    {"__address__" = "192.168.0.151:9100"},
    {"__address__" = "192.168.0.152:9100"},
    {"__address__" = "192.168.0.153:9100"},
  ]

  rule {
    replacement   = "node-exporter"
    target_label  = "job"
  }

  rule {
    source_labels = ["__address__"]
    regex = "([^:]+):.*"
    replacement = "$1"
    target_label = "instance"
  }
}

prometheus.exporter.snmp "network_devices" {
  target "vr_u500x" {
    address = "192.168.0.1"
    walk_param = "vr_u500x"
  }

  target "sks7300_4x4t" {
    address = "192.168.0.4"
    walk_param = "sks7300_4x4t"
  }

  walk_param "vr_u500x" {
    name = "vr-u500x"
  }

  walk_param "sks7300_4x4t" {
    name = "sks7300-4x4t"
  }
}

mimir.rules.kubernetes "default" {
  address = "http://mimir-nginx.mimir.svc.cluster.local"
}

prometheus.scrape "pods" {
  targets = discovery.relabel.pods.output
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.scrape "services" {
  targets = discovery.relabel.services.output
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.scrape "proxmox_hosts" {
  targets = discovery.relabel.proxmox_hosts.output
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.scrape "snmp_devices" {
  targets = prometheus.exporter.snmp.network_devices.targets
  forward_to = [prometheus.remote_write.default.receiver]
  job_name = "snmp"
}

prometheus.scrape "nodes" {
  targets = discovery.kubernetes.nodes.targets
  scheme     = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
  forward_to = [prometheus.remote_write.default.receiver]
  job_name = "node-exporter"
}

prometheus.operator.servicemonitors "servicemonitors" {
  forward_to = [prometheus.remote_write.default.receiver]
}

discovery.relabel "kube_apiserver" {
  targets = discovery.kubernetes.endpoints.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    regex = "default"
    action = "keep"
  }

  rule {
    source_labels = ["__meta_kubernetes_service_name"]
    regex = "kubernetes"
    action = "keep"
  }

  rule {
    source_labels = ["__meta_kubernetes_endpoint_port_name"]
    regex = "https"
    action = "keep"
  }

  rule {
    replacement   = "kube-apiserver"
    target_label  = "job"
  }
}

prometheus.scrape "kube_apiserver" {
  targets = discovery.relabel.kube_apiserver.output
  scheme = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
  forward_to = [prometheus.remote_write.default.receiver]
}

discovery.relabel "kube_scheduler" {
  targets = discovery.kubernetes.pods.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    regex = "kube-system"
    action = "keep"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_component"]
    regex = "kube-scheduler"
    action = "keep"
  }

  rule {
    source_labels = ["__address__"]
    replacement = "$1:10259"
    target_label = "__address__"
  }

  rule {
    replacement   = "kube-scheduler"
    target_label  = "job"
  }
}

prometheus.scrape "kube_scheduler" {
  targets = discovery.relabel.kube_scheduler.output
  scheme     = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
  forward_to = [prometheus.remote_write.default.receiver]
}

discovery.relabel "cadvisor" {
  targets = discovery.kubernetes.nodes.targets

  rule {
    replacement   = "/metrics/cadvisor"
    target_label  = "__metrics_path__"
  }

  rule {
    replacement   = "cadvisor"
    target_label  = "job"
  }
}

prometheus.scrape "cadvisor" {
  targets = discovery.relabel.cadvisor.output
  scheme = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
  forward_to = [prometheus.remote_write.default.receiver]
}

discovery.relabel "kubelet" {
  targets = discovery.kubernetes.nodes.targets

  rule {
    replacement   = "/metrics"
    target_label  = "__metrics_path__"
  }

  rule {
    replacement   = "kubelet"
    target_label  = "job"
  }
}

prometheus.scrape "kubelet" {
  targets = discovery.relabel.kubelet.output
  scheme = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://mimir-nginx.mimir.svc.cluster.local/api/v1/push"
  }
}

loki.source.kubernetes "pods" {
  targets = discovery.kubernetes.pods.targets
  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://loki.loki.svc.cluster.local:3100/loki/api/v1/push"
  }
}
